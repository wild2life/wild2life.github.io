import{_ as s,h as a,o as n,aa as e}from"./chunks/framework.CMyQ9WBu.js";const m=JSON.parse('{"title":"Docker 部署 VITE_GLOB_API_URL 配置","description":"","frontmatter":{},"headers":[],"relativePath":"daily-notes/issue-11.md","filePath":"daily-notes/issue-11.md","lastUpdated":null}'),p={name:"daily-notes/issue-11.md"},l=e(`<h1 id="docker-部署-vite-glob-api-url-配置" tabindex="-1">Docker 部署 VITE_GLOB_API_URL 配置 <a class="header-anchor" href="#docker-部署-vite-glob-api-url-配置" aria-label="Permalink to &quot;Docker 部署 VITE_GLOB_API_URL 配置&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">原文地址</p><p><a href="https://github.com/wild2life/daily-notes/issues/11" target="_blank" rel="noreferrer">Docker 部署 VITE_GLOB_API_URL 配置 | GitHub</a></p></div><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>你希望在 Docker 部署过程中，通过动态传递环境变量的方式来设置 <code>VITE_GLOB_API_URL</code> 的值。</p><h2 id="方法-1-使用-docker-的-build-arg-参数" tabindex="-1">方法 1: 使用 Docker 的 --build-arg 参数 <a class="header-anchor" href="#方法-1-使用-docker-的-build-arg-参数" aria-label="Permalink to &quot;方法 1: 使用 Docker 的 --build-arg 参数&quot;">​</a></h2><p>如果在构建时您需要动态设置 <strong>VITE_GLOB_API_URL</strong>，可以通过 Dockerfile 中的 ARG 和 ENV 来实现。下面是一个示例：</p><h3 id="_1-修改-dockerfile" tabindex="-1">1. 修改 Dockerfile <a class="header-anchor" href="#_1-修改-dockerfile" aria-label="Permalink to &quot;1. 修改 Dockerfile&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 使用合适的基础镜像</span></span>
<span class="line"><span>FROM node:18</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 设置构建参数</span></span>
<span class="line"><span>ARG VITE_GLOB_API_URL</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 设置环境变量</span></span>
<span class="line"><span>ENV VITE_GLOB_API_URL=\${VITE_GLOB_API_URL}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 设置工作目录</span></span>
<span class="line"><span>WORKDIR /app</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 拷贝 package.json 和其他依赖文件</span></span>
<span class="line"><span>COPY package*.json ./</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 安装依赖</span></span>
<span class="line"><span>RUN npm install</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 拷贝项目源代码</span></span>
<span class="line"><span>COPY . .</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 构建项目</span></span>
<span class="line"><span>RUN npm run build</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 运行应用</span></span>
<span class="line"><span>CMD [&quot;npm&quot;, &quot;run&quot;, &quot;serve&quot;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="_2-构建-docker-镜像时传递参数" tabindex="-1">2. 构建 Docker 镜像时传递参数 <a class="header-anchor" href="#_2-构建-docker-镜像时传递参数" aria-label="Permalink to &quot;2. 构建 Docker 镜像时传递参数&quot;">​</a></h3><p>在构建镜像时，使用 --build-arg 来传递 <strong>VITE_GLOB_API_URL</strong> 的值：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker build --build-arg VITE_GLOB_API_URL=http://your-api-url.com -t your-image-name .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="方法-2-使用-docker-环境变量传递" tabindex="-1">方法 2: 使用 Docker 环境变量传递 <a class="header-anchor" href="#方法-2-使用-docker-环境变量传递" aria-label="Permalink to &quot;方法 2: 使用 Docker 环境变量传递&quot;">​</a></h2><p>你可以在 Docker 启动时通过环境变量来替换 <code>VITE_GLOB_API_URL</code> 的值，而不需要在 <code>env.production</code> 文件中进行硬编码。</p><h3 id="_1-修改-env-production-文件" tabindex="-1">1. 修改 <code>env.production</code> 文件 <a class="header-anchor" href="#_1-修改-env-production-文件" aria-label="Permalink to &quot;1. 修改 \`env.production\` 文件&quot;">​</a></h3><p>保持 <code>VITE_GLOB_API_URL</code> 在 <code>env.production</code> 文件中为默认值：</p><div class="language-env vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">env</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>VITE_GLOB_API_URL=/api/v1 或者 VITE_GLOB_API_URL=\${VITE_GLOB_API_URL}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-使用-docker-e-参数传递环境变量" tabindex="-1">2.使用 Docker -e 参数传递环境变量 <a class="header-anchor" href="#_2-使用-docker-e-参数传递环境变量" aria-label="Permalink to &quot;2.使用 Docker -e 参数传递环境变量&quot;">​</a></h3><p>在启动 Docker 容器时，通过 -e 参数传递 <strong>VITE_GLOB_API_URL</strong> 的值。例如，假设你希望传递 <a href="http://your-api-url.com" target="_blank" rel="noreferrer">http://your-api-url.com</a> 作为 VITE_GLOB_API_URL：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker run -e VITE_GLOB_API_URL=http://your-api-url.com -p 80:80 your-image-name</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>通过这种方式，容器在启动时会使用 Docker 中的环境变量替换** .env.production**文件中的默认值。</p><h2 id="方法-3-在启动时使用脚本重写环境变量" tabindex="-1">方法 3: 在启动时使用脚本重写环境变量 <a class="header-anchor" href="#方法-3-在启动时使用脚本重写环境变量" aria-label="Permalink to &quot;方法 3: 在启动时使用脚本重写环境变量&quot;">​</a></h2><h3 id="_1-创建启动脚本-start-sh" tabindex="-1">1. 创建启动脚本 start.sh <a class="header-anchor" href="#_1-创建启动脚本-start-sh" aria-label="Permalink to &quot;1. 创建启动脚本 start.sh&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>#!/bin/bash</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 替换 env 文件中的占位符</span></span>
<span class="line"><span>sed -i &quot;s|VITE_GLOB_API_URL=.*|VITE_GLOB_API_URL=$VITE_GLOB_API_URL|&quot; /app/.env.production</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 启动应用</span></span>
<span class="line"><span>npm run serve</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_2-修改-dockerfile-来使用启动脚本" tabindex="-1">2. 修改 Dockerfile 来使用启动脚本 <a class="header-anchor" href="#_2-修改-dockerfile-来使用启动脚本" aria-label="Permalink to &quot;2. 修改 Dockerfile 来使用启动脚本&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 使用合适的基础镜像</span></span>
<span class="line"><span>FROM node:18</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 设置工作目录</span></span>
<span class="line"><span>WORKDIR /app</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 拷贝 package.json 和其他依赖文件</span></span>
<span class="line"><span>COPY package*.json ./</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 安装依赖</span></span>
<span class="line"><span>RUN npm install</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 拷贝项目源代码</span></span>
<span class="line"><span>COPY . .</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 拷贝启动脚本</span></span>
<span class="line"><span>COPY start.sh /usr/local/bin/start.sh</span></span>
<span class="line"><span>RUN chmod +x /usr/local/bin/start.sh</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 设置容器启动命令</span></span>
<span class="line"><span>CMD [&quot;start.sh&quot;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="_3-运行-docker-容器时传递环境变量" tabindex="-1">3. 运行 Docker 容器时传递环境变量 <a class="header-anchor" href="#_3-运行-docker-容器时传递环境变量" aria-label="Permalink to &quot;3. 运行 Docker 容器时传递环境变量&quot;">​</a></h3><div class="language-docker vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在这个方法中，start.sh 脚本会在容器启动时首先修改** env.production** 文件，然后启动您的应用。</p>`,28),r=[l];function i(c,o,t,b,d,u){return n(),a("div",null,r)}const _=s(p,[["render",i]]);export{m as __pageData,_ as default};
